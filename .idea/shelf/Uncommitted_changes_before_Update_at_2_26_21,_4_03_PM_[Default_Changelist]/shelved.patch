Index: TeamCode/src/main/java/org/firstinspires/ftc/teamcode/Teleop/FullTeleop.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.firstinspires.ftc.teamcode.Teleop;\n\nimport com.qualcomm.robotcore.eventloop.opmode.OpMode;\nimport com.qualcomm.robotcore.eventloop.opmode.TeleOp;\n\nimport org.firstinspires.ftc.teamcode.Hardware;\n\n//import org.firstinspires.ftc.teamcode.src.main.java.org.firstinspires.ftc.teamcode.DriveOnlyHardware;\n\n\n@TeleOp(name=\"FullTeleop\", group=\"Teleop\")\n\n//@Disabled\n\npublic class FullTeleop extends OpMode {\n\n    Hardware robot = new Hardware();\n\n    private float drive = .55f;\n    //private float BRDrive = 1f;\n\n    @Override\n    public void init()\n    {\n        //Initialize the hardware variables.\n        //The init() method of the hardware class does all the work here\n        robot.init(hardwareMap);\n\n\n    }\n\n    @Override\n    public void loop()\n\n    {\n        if (gamepad1.x) {\n            robot.launcherServo.setPosition(1);\n        }\n        else {\n            robot.launcherServo.setPosition(0);\n        }\n        if (gamepad1.b) {\n            robot.claw.setPosition(1);\n        }\n        else if (gamepad1.a){\n            robot.claw.setPosition(0);\n        }\n        else {\n            robot.claw.setPosition(.5);\n        }\n        if (gamepad1.right_trigger > 0.1) {\n            robot.launcherMotor.setPower(.78);\n        }\n        else {\n            robot.launcherMotor.setPower(0);\n        }\n        if ( gamepad1.right_bumper)\n        {\n            robot.intakeMotor.setPower(1);\n        }\n        else\n        {\n            robot.intakeMotor.setPower(0);\n        }\n\n        if (gamepad1.left_bumper)\n        {\n            robot.intakeMotor.setPower(1);\n        }\n        else\n        {\n            robot.intakeMotor.setPower(1);\n        }\n\n        mecanumMove();\n\n    }\n\n    public void mecanumMove()\n    {\n        //variables\n        double r = Math.hypot(-gamepad1.left_stick_x, gamepad1.left_stick_y);\n        double robotAngle = Math.atan2(gamepad1.left_stick_y, -gamepad1.left_stick_x) - Math.PI / 4;\n        double rightX = gamepad1.right_stick_x;\n        final double v1 = r * Math.cos(robotAngle) + rightX;\n        final double v2 = r * Math.sin(robotAngle) - rightX;\n        final double v3 = r * Math.sin(robotAngle) + rightX;\n        final double v4 = r * Math.cos(robotAngle) - rightX;\n\n        robot.fLMotor.setPower(-drive * v1);\n        robot.fRMotor.setPower(-drive * v2);\n        robot.bLMotor.setPower(-drive * v3);\n        robot.bRMotor.setPower(-drive * v4);\n\n        telemetry.addData(\"fLPower\", -drive * v1);\n        telemetry.addData(\"fRPower\", -drive * v2);\n        telemetry.addData(\"bLPower\", -drive * v3);\n        telemetry.addData(\"bRPower\", -drive * v4);\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TeamCode/src/main/java/org/firstinspires/ftc/teamcode/Teleop/FullTeleop.java	(revision 7d2a815c73aa475aa50d5ecab8b3db1858429161)
+++ TeamCode/src/main/java/org/firstinspires/ftc/teamcode/Teleop/FullTeleop.java	(date 1612999042000)
@@ -2,6 +2,7 @@
 
 import com.qualcomm.robotcore.eventloop.opmode.OpMode;
 import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
+import com.qualcomm.robotcore.util.ElapsedTime;
 
 import org.firstinspires.ftc.teamcode.Hardware;
 
@@ -17,6 +18,9 @@
     Hardware robot = new Hardware();
 
     private float drive = .55f;
+    private ElapsedTime intakeTimer = new ElapsedTime();
+    private boolean intakeOnIn = false;
+    private boolean intakeOnOut = false;
     //private float BRDrive = 1f;
 
     @Override
@@ -25,8 +29,7 @@
         //Initialize the hardware variables.
         //The init() method of the hardware class does all the work here
         robot.init(hardwareMap);
-
-
+        intakeTimer.reset();
     }
 
     @Override
@@ -34,10 +37,10 @@
 
     {
         if (gamepad1.x) {
-            robot.launcherServo.setPosition(1);
+            robot.launcherServo.setPosition(0.20);
         }
         else {
-            robot.launcherServo.setPosition(0);
+            robot.launcherServo.setPosition(0.6);
         }
         if (gamepad1.b) {
             robot.claw.setPosition(1);
@@ -49,29 +52,39 @@
             robot.claw.setPosition(.5);
         }
         if (gamepad1.right_trigger > 0.1) {
-            robot.launcherMotor.setPower(.78);
+            robot.launcherMotor.setPower(.7);
         }
         else {
             robot.launcherMotor.setPower(0);
         }
-        if ( gamepad1.right_bumper)
-        {
-            robot.intakeMotor.setPower(1);
-        }
-        else
-        {
-            robot.intakeMotor.setPower(0);
+        if (gamepad1.right_bumper && intakeTimer.milliseconds() > 200) {
+            if (!intakeOnIn) {
+                robot.conveyorMotor.setPower(-1);
+                robot.intakeMotor.setPower(1);
+                intakeOnIn = true;
+            }
+            else {
+                robot.intakeMotor.setPower(0);
+                robot.conveyorMotor.setPower(0);
+                intakeOnOut = false;
+                intakeOnIn = false;
+            }
+            intakeTimer.reset();
         }
-
-        if (gamepad1.left_bumper)
-        {
-            robot.intakeMotor.setPower(1);
-        }
-        else
-        {
-            robot.intakeMotor.setPower(1);
+        if (gamepad1.left_bumper && intakeTimer.milliseconds() > 200) {
+            if (!intakeOnOut) {
+                robot.conveyorMotor.setPower(1);
+                robot.intakeMotor.setPower(-1);
+                intakeOnOut = true;
+            }
+            else {
+                robot.intakeMotor.setPower(0);
+                robot.conveyorMotor.setPower(0);
+                intakeOnOut = false;
+                intakeOnIn = false;
+            }
+            intakeTimer.reset();
         }
-
         mecanumMove();
 
     }
@@ -80,7 +93,7 @@
     {
         //variables
         double r = Math.hypot(-gamepad1.left_stick_x, gamepad1.left_stick_y);
-        double robotAngle = Math.atan2(gamepad1.left_stick_y, -gamepad1.left_stick_x) - Math.PI / 4;
+        double robotAngle = Math.atan2(gamepad1.left_stick_y, gamepad1.left_stick_x) - Math.PI / 4;
         double rightX = gamepad1.right_stick_x;
         final double v1 = r * Math.cos(robotAngle) + rightX;
         final double v2 = r * Math.sin(robotAngle) - rightX;
Index: TeamCode/src/main/java/org/firstinspires/ftc/teamcode/Hardware.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.firstinspires.ftc.teamcode;\n\nimport com.qualcomm.robotcore.hardware.CRServo;\nimport com.qualcomm.robotcore.hardware.DcMotor;\nimport com.qualcomm.robotcore.hardware.DcMotorSimple;\nimport com.qualcomm.robotcore.hardware.HardwareMap;\nimport com.qualcomm.robotcore.hardware.Servo;\n\n//public class package org.firstinspires.ftc.teamcode.src;\n\n//import com.qualcomm.robotcore.hardware.DistanceSensor;\n\n\npublic class Hardware\n{\n    public DcMotor fLMotor;\n    public DcMotor fRMotor;\n    public DcMotor bLMotor;\n    public DcMotor bRMotor;\n\n    public DcMotor launcherMotor;\n\n    public Servo launcherServo;\n\n    public Servo claw;\n\n    public DcMotor intakeMotor;\n\n    public DcMotor conveyorMotor;\n\n    //declaring values for use with encoders\n    public String xyz = \"z\";\n\n    public static final double     COUNTS_PER_MOTOR_REV = 383.6;    // Currently: Andymark Neverest 40\n    public static final double     COUNTS_PER_REV_ARM = 1440;\n    public static final double     COUNTS_PER_INCH_ARM = COUNTS_PER_REV_ARM/4;\n    public static final double     DRIVE_GEAR_REDUCTION = .666;     // This is < 1.0 if geared UP //On OUR CENTER MOTOR THE GEAR REDUCTION IS .5\n    public static final double     WHEEL_DIAMETER_INCHES = 3.7795;     // For figuring circumference\n    public static final double     COUNTS_PER_INCH = (COUNTS_PER_MOTOR_REV * DRIVE_GEAR_REDUCTION) /\n            (WHEEL_DIAMETER_INCHES * 3.1415);\n\n\n    /* Local OpMode members. */\n    HardwareMap hwMap;\n\n    /* Initialize standard Hardware interfaces */\n    public void init(HardwareMap ahwMap) {\n        // save reference to HW Map\n        hwMap = ahwMap;\n\n        // Define Motors\n        fLMotor = hwMap.get(DcMotor.class, \"fLMotor\");\n        fRMotor = hwMap.get(DcMotor.class, \"fRMotor\");\n        bRMotor = hwMap.get(DcMotor.class, \"bRMotor\");\n        bLMotor = hwMap.get(DcMotor.class, \"bLMotor\");\n\n        launcherMotor = hwMap.get(DcMotor.class, \"launcherMotor\");\n\n        intakeMotor = hwMap.get(DcMotor.class, \"intakeMotor\");\n\n        conveyorMotor = hwMap.get(DcMotor.class, \"conveyorMotor\");\n\n        launcherServo = hwMap.get(Servo.class, \"launcherServo\");\n\n        claw = hwMap.get(Servo.class, \"claw\");\n\n        fLMotor.setPower(0);\n        bLMotor.setPower(0);\n        fRMotor.setPower(0);\n        bRMotor.setPower(0);\n        intakeMotor.setPower(0);\n        conveyorMotor.setPower(0);\n\n        launcherMotor.setPower(0);\n\n\n        // Set all motors to run without encoders.\n        // May want to use RUN_USING_ENCODERS if encoders are installed.\n//        fLMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);\n//        fRMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);\n//        bLMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);\n//        bRMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);\n        fLMotor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);\n        fRMotor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);\n        bLMotor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);\n        bRMotor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);\n        launcherMotor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);\n        intakeMotor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);\n        conveyorMotor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);\n\n        fLMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);\n        bLMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);\n        fRMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);\n        bRMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);\n        launcherMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);\n        intakeMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);\n        conveyorMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);\n\n\n        fLMotor.setDirection(DcMotor.Direction.REVERSE);\n        fRMotor.setDirection(DcMotor.Direction.FORWARD);\n        bLMotor.setDirection(DcMotor.Direction.REVERSE);\n        bRMotor.setDirection(DcMotor.Direction.FORWARD);\n        launcherMotor.setDirection(DcMotor.Direction.FORWARD);\n        intakeMotor.setDirection(DcMotor.Direction.FORWARD);\n        conveyorMotor.setDirection(DcMotor.Direction.FORWARD);\n\n        launcherServo.setPosition(0);\n\n        claw.setPosition(0);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TeamCode/src/main/java/org/firstinspires/ftc/teamcode/Hardware.java	(revision 7d2a815c73aa475aa50d5ecab8b3db1858429161)
+++ TeamCode/src/main/java/org/firstinspires/ftc/teamcode/Hardware.java	(date 1612997290000)
@@ -101,11 +101,11 @@
         fRMotor.setDirection(DcMotor.Direction.FORWARD);
         bLMotor.setDirection(DcMotor.Direction.REVERSE);
         bRMotor.setDirection(DcMotor.Direction.FORWARD);
-        launcherMotor.setDirection(DcMotor.Direction.FORWARD);
-        intakeMotor.setDirection(DcMotor.Direction.FORWARD);
+        launcherMotor.setDirection(DcMotor.Direction.REVERSE);
+        intakeMotor.setDirection(DcMotor.Direction.REVERSE);
         conveyorMotor.setDirection(DcMotor.Direction.FORWARD);
 
-        launcherServo.setPosition(0);
+        launcherServo.setPosition(0.6);
 
         claw.setPosition(0);
     }
Index: TeamCode/src/main/java/org/firstinspires/ftc/teamcode/Test/MotorTestHardware.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/* Copyright (c) 2017 FIRST. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted (subject to the limitations in the disclaimer below) provided that\n * the following conditions are met:\n *\n * Redistributions of source code must retain the above copyright notice, this list\n * of conditions and the following disclaimer.\n *\n * Redistributions in binary form must reproduce the above copyright notice, this\n * list of conditions and the following disclaimer in the documentation and/or\n * other materials provided with the distribution.\n *\n * Neither the name of FIRST nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written permission.\n *\n * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS\n * LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\n * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\npackage org.firstinspires.ftc.teamcode.Test;\n\nimport com.qualcomm.robotcore.hardware.DcMotor;\nimport com.qualcomm.robotcore.hardware.HardwareMap;\nimport com.qualcomm.robotcore.hardware.Servo;\nimport com.qualcomm.robotcore.util.ElapsedTime;\n\n/**\n * This is NOT an opmode.\n *\n * This class can be used to define all the specific hardware for a single robot.\n * In this case that robot is a Pushbot.\n * See PushbotTeleopTank_Iterative and others classes starting with \"Pushbot\" for usage examples.\n *\n * This hardware class assumes the following device names have been configured on the robot:\n * Note:  All names are lower case and some have single spaces between words.\n *\n * Motor channel:  Left  drive motor:        \"left_drive\"\n * Motor channel:  Right drive motor:        \"right_drive\"\n * Motor channel:  Manipulator drive motor:  \"left_arm\"\n * Servo channel:  Servo to open left claw:  \"left_hand\"\n * Servo channel:  Servo to open right claw: \"right_hand\"\n */\npublic class MotorTestHardware\n{\n    /* Public OpMode members. */\n    public DcMotor  motor   = null;\n\n    /* local OpMode members. */\n    HardwareMap hwMap           =  null;\n    private ElapsedTime period  = new ElapsedTime();\n\n    /* Constructor */\n    public MotorTestHardware(){\n\n    }\n\n    /* Initialize standard Hardware interfaces */\n    public void init(HardwareMap ahwMap) {\n        // Save reference to Hardware map\n        hwMap = ahwMap;\n\n        // Define and Initialize Motors\n        motor  = hwMap.get(DcMotor.class, \"motor\");\n        // Set all motors to zero power\n        motor.setPower(0);\n\n        // Set all motors to run without encoders.\n        // May want to use RUN_USING_ENCODERS if encoders are installed.\n        motor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);\n        motor.setDirection(DcMotor.Direction.REVERSE);\n    }\n }\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TeamCode/src/main/java/org/firstinspires/ftc/teamcode/Test/MotorTestHardware.java	(revision 7d2a815c73aa475aa50d5ecab8b3db1858429161)
+++ TeamCode/src/main/java/org/firstinspires/ftc/teamcode/Test/MotorTestHardware.java	(date 1612996288000)
@@ -77,7 +77,7 @@
         // Set all motors to run without encoders.
         // May want to use RUN_USING_ENCODERS if encoders are installed.
         motor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
-        motor.setDirection(DcMotor.Direction.REVERSE);
+        motor.setDirection(DcMotor.Direction.FORWARD);
     }
  }
 
